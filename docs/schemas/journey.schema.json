# Mila Nextâ€¯JS â€¢ Architecture Guide

> _Singleâ€‘sourceâ€‘ofâ€‘truth for how the pieces of **Mila Nextâ€¯JS** fit together and why
> they were chosen._

---

## 1. Highâ€‘Level Overview

| Layer | Technology | Purpose |
|-------|------------|---------|
| **Frontend** | **Next.jsÂ 15** (App Router) â€¢ **ReactÂ 19** | Server/Client components, edge streaming |
| **Backendâ€‘forâ€‘Frontend** | **Next.js Route Handlers** | Auth, Graph coordination, OpenAI proxy |
| **CoreÂ Data** | **Supabase** (PostgresÂ +Â AuthÂ +Â Storage) | Content, milestones, media, access control |
| **AI Services** | **OpenAI Assistants & TTS** | Chat bot & blog audio |
| **Observability** | VercelÂ Analytics â€¢ GoogleÂ GA4 | Usage and performance metrics |

```mermaid
graph LR
  Client -->|JWT cookie| NextJS
  NextJS -->|SQL| Supabase
  NextJS -->|HTTPS| OpenAI
  Supabase -->|Bucket| Storage
```

---

## 2. Frontend Anatomy

```bash
src/
â”œâ”€ app/                 # App Router root
â”‚  â”œâ”€ (protected)/      # Authâ€‘gated pages
â”‚  â”œâ”€ (public)/         # Public landing & marketing
â”‚  â””â”€ api/              # Route handlers (edge)
â”œâ”€ components/          # Shared React components
â”œâ”€ lib/                 # Crossâ€‘cutting helpers
â”œâ”€ types/               # Zod / TS models
â””â”€ utils/               # Client + server utilities
```

*Route groups* leverage NextÂ 15 conventions for clean RBAC:

```
/src/app/(protected)/blog/â€¦      â€“ Requires Supabase session
/src/app/(public)/about          â€“ Always public
```

---

## 3. DatabaseÂ Model (Supabase)

``` mermaid
erDiagram
  blogs ||--o{ blog_audio : caches }
  blogs ||--o{ blog_tags  : tagged }
  journey_cards {
      id uuid PK
      journey_type text
      title text
      message text
      event_date date
      created_by uuid FK users.id
  }
  chat_threads ||--o{ chat_messages : contains }
```

| Table | Highlight |
|-------|-----------|
| **blogs** | Richâ€‘text post; owner =Â `created_by` |
| **blog_audio** | pk=`slug`, binary mp3, `created_at` |
| **journey_cards** | Milestones (firstâ€‘year, oneâ€‘yearâ€¦) |
| **chat_threads / messages** | Persisted assistant context |

### Rowâ€‘Level Security example

```sql
-- Only allow owners to read / write their journey cards
create policy "Journey owners" on journey_cards
using (created_by = auth.uid())
with check (created_by = auth.uid());
```

---

## 4. APIÂ Surface (OpenAPIÂ 3.1)

| Path | Verb | Auth | Summary |
|------|------|------|---------|
| `/api/chat` | POST | ðŸ”’ | Create / continue chat thread |
| `/api/poll-chat-status` | POST | ðŸ”’ | Poll assistant run |
| `/api/blog/{slug}/audio` | GET | ðŸ”’ | Stream or cache TTS mp3 |

Full contract: [`docs/openapi.yaml`](../openapi.yaml)  
Tool manifest: [`mcp.json`](../mcp.json)

---

## 5. DataÂ Flows

```
(1) Login
Browser â†’ Supabase OAuth â†’ JWT cookie â†’ Middleware â†’ Protected pages

(2) Blogâ€‘Audio
Client â†’ /api/blog/{slug}/audio â†’
  [if cache miss] â†’ OpenAI TTS â†’ Supabase.storage.insert() â†’ Stream
  [else]           â†’ Supabase.storage.get()  â†’ Stream

(3) Chat
Client â†’ /api/chat â†’ Assistants API â†’ Store thread/msg â†’ SSE stream back
```

---

## 6. Development Patterns

| Concern | Approach |
|---------|----------|
| **State** | ReactÂ hooks for UI, server actions for mutations |
| **Errors** | `error.tsx` boundaries + typed Error payloads |
| **Performance** | Image optimization, HTTPÂ caching, edge streaming |
| **Testing** | Playwright e2e â€¢ Vitest for utils â€¢ PostgREST fixtures |

---

## 7. Environment Variables

| Variable | Scope | Required | Notes |
|----------|-------|----------|-------|
| `NEXT_PUBLIC_SUPABASE_URL` | Client | âœ” | Project URL |
| `NEXT_PUBLIC_SUPABASE_ANON_KEY` | Client | âœ” | Public anon key |
| `SUPABASE_SERVICE_ROLE_KEY` | Server | â€‘ | Only migrations / RLS tests |
| `OPENAI_API_KEY` | Server | âœ” | ChatÂ +Â TTS |
| `NEXT_PUBLIC_SITE_URL` | Client | âœ” | OAuth redirect base |
| `NEXT_PUBLIC_ALLOWED_EMAIL` | Server | â€‘ | Commaâ€‘list allowlist |

Copy template: `cp .env.example .env.local`.

---

## 8. SchemaÂ Docs

* **OpenAPI spec** â€“ [`/docs/openapi.yaml`](../docs/openapi.yaml)  
* **MCP manifest** â€“ [`/mcp.json`](../mcp.json)  
* **JSON Schemas** â€“ [`/docs/schemas`](../docs/schemas) (`blog.schema.json`, `journey.schema.json`, â€¦)

---

## 9. Deployment & CI/CD

```text
 â”Œâ”€ Push / PR
 â”‚
 â”‚  1. GitHub Actions: lint â†’ typeâ€‘check â†’ openapiâ€‘lint
 â”‚  2. Supabase CLI: run migrations on shadow db
 â”‚  3. Vercel build (edge) â†’ preview URL
 â”‚  4. Playwright smoke tests against preview
 â””â”€ Merge â†’ Autoâ€‘promote to prod (.milagates.com)
```

* **Edge Functions** for lowâ€‘latency TTS streaming<br>
* **Analytics** autoâ€‘enabled via Vercel + GA4<br>
* EnvÂ vars managed perâ€‘environment in **VercelÂ Dashboard**.

---

## 10. Glossary

| Term | Meaning |
|------|---------|
| **JourneyÂ Card** | A milestone entry (e.g., "First Steps") displayed on timeline |
| **Thread / Run** | OpenAI Assistants vocabulary: a *thread* holds messages; a *run* is an inference execution |
| **ProtectedÂ Route** | Any page under `(protected)` that requires Supabase session |

---

### Last updatedÂ â†’Â MayÂ 9â€¯2025
